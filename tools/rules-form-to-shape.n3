@prefix rdf:  <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix owl: <http://www.w3.org/2002/07/owl#>.
@prefix sh:   <http://www.w3.org/ns/shacl#> .
@prefix xsd:  <http://www.w3.org/2001/XMLSchema#> .
@prefix ui: <http://www.w3.org/ns/ui#>.
@prefix list: <http://www.w3.org/2000/10/swap/list#>. # https://www.w3.org/2000/10/swap/doc/CwmBuiltins

@prefix xf: <http://www.w3.org/ns/pim/xform#>. # @@ think of where to put this

# Propagate Form or Group
#
# they are equivalent

# Group to group (or Form)
{ ?s  xf:nodeShapeForForm ?f .
  # ?f     a ui:Form .
 ?f ui:parts ?parts .
    ?parts list:member ?part.
    ?part a ui:Group }
=>
{
   ?s xf:nodeShapeForForm ?part;
 } .

# Group to field:
 { ?s  xf:nodeShapeForForm ?f .
   # ?f     a ui:Form .
  ?f ui:parts ?parts .
  ?parts list:member ?part.
  ?part  ui:property ?property }
 =>
 {
 ?s sh:property [
    a sh:PropertyShape;
    sh:path ?property;
    xf:propertyShapeForField ?part;
    ]
  } .


# Associated class

{ ?f a ui:Form; is ui:creationForm of ?class .
  ?s xf:nodeShapeForForm ?f }
      =>
{ ?s a sh:NodeShape; sh:targetClass ?class } .


# Simple text field
{  ?s  xf:propertyShapeForField ?f .
   ?f a ui:SingleLineTextField ;
        ui:property ?property .
}
   =>
{ ?s
      sh:path ?property; # Note path can be more complex
      sh:datatype xsd:string;
}.

# Multiline text field
{  ?s  xf:propertyShapeForField ?f .
   ?f a ui:MultiLineTextField ;
        ui:property ?property .
}
   =>
{ ?s
      sh:path ?property; #
      sh:datatype xsd:string;
}.

# Color field
{  ?s  xf:propertyShapeForField ?f .
   ?f a ui:ColorField ; # @@ Could be multi
        ui:property ?property .
}
   =>
{ ?s sh:path ?property;
      sh:datatype xsd:color;
      sh:pattern "^\\s*#[0-9a-f][0-9a-f][0-9a-f][0-9a-f][0-9a-f][0-9a-f]([0-9a-f][0-9a-f])?\\s*$";
}.


# DateTime field

{ ?s  xf:propertyShapeForField ?f.
  ?f ui:part [ a ui:DateTimeField;
      ui:property ?property ]
}
      =>
{ ?s
        sh:path ?property;
        sh:datatype xsd:dateTime;
    }.

############ Multiple
#
# :involvementWithOrganizationsForm a ui:Multiple;
#    ui:label "Involvement with Organization";
#    ui:property org:member; ui:reverse true; # link back from role to member
#    ui:ordered false; # Allow user to order CV secions rather than force date order? No.
#    ui:part :RoleMembershipForm.
#

{ ?f ui:reverse false; ui:property ?property } => { ?f sh:effectiveProperty ?property }.
{ ?f ui:reverse true;  ui:property ?property } => { ?f sh:effectiveProperty [ sh:inversePath ?property ] }.

# Multiple of field
{ ?s  xf:propertyShapeForField ?f .
 ?f   a ui:Multiple ;
      ui:ordered false;
      sh:effectiveProperty ?property;
      ui:part ?part .
}
=>
{ ?s sh:path ?property;
      sh:node [
        a sh:NodeShape;
        xf:nodeShapeForForm ?part;  # See next rule for groups
      ].
 } .

{ ?s xf:propertyShapeForField ?part . ?part a ui:Group } =>
  { ?s sh:node [a sh:NodeShape; xf:nodeShapeForForm  ?part] } .

## Multiple of Groups
 { ?s  xf:propertyShapeForField ?f .
  ?f   a ui:Multiple ;
       ui:ordered true;
       ui:property ?property;
       ui:part ?part .
 } => {
 ?s sh:property [ # Object must be a list
      a sh:PropertyShape;
      sh:targetClass rdf:Collection; # Collection of what though?
      # sh:collectionMemberShape ?
      sh:path ?property;
      sh:node [a sh:NodeShape;
        sh:property [ # See https://gitter.im/solid/chat?at=61fc4db03349fe1c71f3c022
            sh:path ( [ sh:zeroOrMorePath rdf:rest ] rdf:first ) ;
            sh:node [ a sh:NodeShape; xf:nodeShapeForForm ?part ];
        ]
      ];
   ]
  } .



######### Generic

## Generic moving of label for those who have one

{ ?s  xf:propertyShapeForField ?f .
  ?f  ui:label ?label .
}
=>
{ ?s sh:name ?label .
 } .

 ## Generic moving of min and ma for those who have one

{ ?s  xf:propertyShapeForField ?f .
  ?f  ui:minLength ?n .
} =>
{ ?s sh:minLength ?n .
} .

{ ?s  xf:propertyShapeForField ?f .
  ?f  ui:maxLength ?n .
} =>
{ ?s sh:maxLength ?n .
} .


############################## UNUSED stuff from inverse xform file
# Fixed data field
#
#{  ?s  xf:propertyShapeForField ?f .
#
#?f ui:part [ a ui:Choice;
#     ui:default ?value;
#     ui:fixed true;
#     ui:property ?property ]
#}
#      =>
#
# { ?s
#     sh:property ?arc .
#     ?arc sh:path ?property;
#           sh:value ?value;
##
# Nested shape, nested form
#
#{
#   ?s  xf:propertyShapeForField ?f .
#
#?f ui:part [ a ui:Choice;
#    # ui:canMintNew true;
#    # ui:from owl:Thing; # @@ target class -- pull from range of property? can leave out?
#    ui:use [ is xf:cat of ?shape2 ];
#    ui:property ?property ]
#}
#
# =>{ ?s sh:property ?arc .
#     ?arc sh:path ?property.
#     ?shape2 sh:targetObjectsOf ?property.
# } .

#ends
